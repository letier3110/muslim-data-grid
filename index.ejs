<style>
  table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
  }
  table, th, td {
      border: 1px solid #ddd;
  }
  th, td {
      padding: 8px;
      text-align: left;
  }
  th {
      background-color: #f4f4f4;
  }
  .pagination {
      margin: 20px 0;
      text-align: center;
  }
  .pagination button {
      margin: 0 5px;
      padding: 5px 10px;
      cursor: pointer;
  }
  .pagination button.disabled {
      cursor: not-allowed;
      opacity: 0.5;
  }
</style>
<table id="data-table">
  <thead>
      <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Age</th>
          <th>ترقيم الصفحات</th>
      </tr>
  </thead>
  <tbody>
      <!-- Rows will be dynamically populated -->
  </tbody>
</table>
<div class="pagination">
  <button id="prev-btn">Previous</button>
  <span id="page-info"></span>
  <button id="next-btn">Next</button>
</div>

<script>
  // Sample data
  const data = Array.from({ length: 50 }, (_, i) => ({
      id: i + 1,
      name: `Name ${i + 1}`,
      age: 20 + (i % 10),
  }));

  // Pagination variables
  const rowsPerPage = 5;
  let currentPage = 1;

  // DOM elements
  const tableBody = document.querySelector("#data-table tbody");
  const prevBtn = document.getElementById("prev-btn");
  const nextBtn = document.getElementById("next-btn");
  const pageInfo = document.getElementById("page-info");

  // Function to render table rows
  function renderTable(page) {
      tableBody.innerHTML = "";
      const start = (page - 1) * rowsPerPage;
      const end = start + rowsPerPage;
      const paginatedData = data.slice(start, end);

      paginatedData.forEach((row) => {
          const tr = document.createElement("tr");
          tr.innerHTML = `
              <td>${row.id}</td>
              <td>${row.name}</td>
              <td>${row.age}</td>
          `;
          tableBody.appendChild(tr);
      });

      // Update pagination info
      pageInfo.textContent = `Page ${currentPage} of ${Math.ceil(data.length / rowsPerPage)}`;
      prevBtn.classList.toggle("disabled", currentPage === 1);
      nextBtn.classList.toggle("disabled", currentPage === Math.ceil(data.length / rowsPerPage));
  }

  // Event listeners for pagination buttons
  prevBtn.addEventListener("click", () => {
      if (currentPage > 1) {
          currentPage--;
          renderTable(currentPage);
      }
  });

  nextBtn.addEventListener("click", () => {
      if (currentPage < Math.ceil(data.length / rowsPerPage)) {
          currentPage++;
          renderTable(currentPage);
      }
  });

  // Initial render
  renderTable(currentPage);
</script>
